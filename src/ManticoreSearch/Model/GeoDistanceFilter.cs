/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Geo distance attribute filter
    /// </summary>
    [DataContract(Name = "geoDistanceFilter")]
    public partial class GeoDistanceFilter : IEquatable<GeoDistanceFilter>, IValidatableObject
    {
        /// <summary>
        /// Defines DistanceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DistanceTypeEnum
        {
            /// <summary>
            /// Enum Adaptive for value: adaptive
            /// </summary>
            [EnumMember(Value = "adaptive")]
            Adaptive = 1,

            /// <summary>
            /// Enum Haversine for value: haversine
            /// </summary>
            [EnumMember(Value = "haversine")]
            Haversine = 2

        }


        /// <summary>
        /// Gets or Sets DistanceType
        /// </summary>
        [DataMember(Name = "distance_type", EmitDefaultValue = false)]
        public DistanceTypeEnum? DistanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoDistanceFilter" /> class.
        /// </summary>
        /// <param name="locationAnchor">locationAnchor.</param>
        /// <param name="locationSource">Attribute containing latitude and longitude data.</param>
        /// <param name="distanceType">distanceType.</param>
        /// <param name="distance">distance.</param>
        public GeoDistanceFilter(GeoDistanceFilterLocationAnchor locationAnchor = default(GeoDistanceFilterLocationAnchor), string locationSource = default(string), DistanceTypeEnum? distanceType = default(DistanceTypeEnum?), string distance = default(string))
        {
            this.LocationAnchor = locationAnchor;
            this.LocationSource = locationSource;
            this.DistanceType = distanceType;
            this.Distance = distance;
        }

        /// <summary>
        /// Gets or Sets LocationAnchor
        /// </summary>
        [DataMember(Name = "location_anchor", EmitDefaultValue = false)]
        public GeoDistanceFilterLocationAnchor LocationAnchor { get; set; }

        /// <summary>
        /// Attribute containing latitude and longitude data
        /// </summary>
        /// <value>Attribute containing latitude and longitude data</value>
        [DataMember(Name = "location_source", EmitDefaultValue = false)]
        public string LocationSource { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", EmitDefaultValue = false)]
        public string Distance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeoDistanceFilter {\n");
            sb.Append("  LocationAnchor: ").Append(LocationAnchor).Append("\n");
            sb.Append("  LocationSource: ").Append(LocationSource).Append("\n");
            sb.Append("  DistanceType: ").Append(DistanceType).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeoDistanceFilter);
        }

        /// <summary>
        /// Returns true if GeoDistanceFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of GeoDistanceFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeoDistanceFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LocationAnchor == input.LocationAnchor ||
                    (this.LocationAnchor != null &&
                    this.LocationAnchor.Equals(input.LocationAnchor))
                ) && 
                (
                    this.LocationSource == input.LocationSource ||
                    (this.LocationSource != null &&
                    this.LocationSource.Equals(input.LocationSource))
                ) && 
                (
                    this.DistanceType == input.DistanceType ||
                    this.DistanceType.Equals(input.DistanceType)
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationAnchor != null)
                {
                    hashCode = (hashCode * 59) + this.LocationAnchor.GetHashCode();
                }
                if (this.LocationSource != null)
                {
                    hashCode = (hashCode * 59) + this.LocationSource.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DistanceType.GetHashCode();
                if (this.Distance != null)
                {
                    hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
