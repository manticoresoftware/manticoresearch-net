/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Object containing data for inserting a new document into the table 
    /// </summary>
    [DataContract(Name = "insertDocumentRequest")]
    public partial class InsertDocumentRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsertDocumentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InsertDocumentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InsertDocumentRequest" /> class.
        /// </summary>
        /// <param name="table">Name of the table to insert the document into (required).</param>
        /// <param name="cluster">Name of the cluster to insert the document into.</param>
        /// <param name="id">Document ID. If not provided, an ID will be auto-generated .</param>
        /// <param name="doc">Object containing document data  (required).</param>
        public InsertDocumentRequest(string table = default, string cluster = default, int id = default, Object doc = default)
        {
            // to ensure "table" is required (not null)
            if (table == null)
            {
                throw new ArgumentNullException("table is a required property for InsertDocumentRequest and cannot be null");
            }
            this.Table = table;
            // to ensure "doc" is required (not null)
            if (doc == null)
            {
                throw new ArgumentNullException("doc is a required property for InsertDocumentRequest and cannot be null");
            }
            this.Doc = doc;
            this.Cluster = cluster;
            this.Id = id;
        }

        /// <summary>
        /// Name of the table to insert the document into
        /// </summary>
        /// <value>Name of the table to insert the document into</value>
        [DataMember(Name = "table", IsRequired = true, EmitDefaultValue = true)]
        public string Table { get; set; }

        /// <summary>
        /// Name of the cluster to insert the document into
        /// </summary>
        /// <value>Name of the cluster to insert the document into</value>
        [DataMember(Name = "cluster", EmitDefaultValue = false)]
        public string Cluster { get; set; }

        /// <summary>
        /// Document ID. If not provided, an ID will be auto-generated 
        /// </summary>
        /// <value>Document ID. If not provided, an ID will be auto-generated </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Object containing document data 
        /// </summary>
        /// <value>Object containing document data </value>
        [DataMember(Name = "doc", IsRequired = true, EmitDefaultValue = true)]
        public Object Doc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsertDocumentRequest {\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  Cluster: ").Append(Cluster).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Doc: ").Append(Doc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
