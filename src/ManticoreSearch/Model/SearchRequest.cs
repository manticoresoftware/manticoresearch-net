/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Request object for search operation
    /// </summary>
    [DataContract(Name = "searchRequest")]
    public partial class SearchRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequest" /> class.
        /// </summary>
        /// <param name="table">The table to perform the search on (required).</param>
        /// <param name="query">query.</param>
        /// <param name="join">Join clause to combine search data from multiple tables.</param>
        /// <param name="highlight">highlight.</param>
        /// <param name="limit">Maximum number of results to return.</param>
        /// <param name="knn">knn.</param>
        /// <param name="aggs">Defines aggregation settings for grouping results.</param>
        /// <param name="expressions">Expressions to calculate additional values for the result.</param>
        /// <param name="maxMatches">Maximum number of matches allowed in the result.</param>
        /// <param name="offset">Starting point for pagination of the result.</param>
        /// <param name="options">Additional search options.</param>
        /// <param name="profile">Enable or disable profiling of the search request.</param>
        /// <param name="sort">sort.</param>
        /// <param name="source">source.</param>
        /// <param name="trackScores">Enable or disable result weight calculation used for sorting.</param>
        public SearchRequest(string table = default, SearchQuery query = default, List<Join> join = default, Highlight highlight = default, int limit = default, KnnQuery knn = default, Dictionary<string, Aggregation> aggs = default, Dictionary<string, string> expressions = default, int maxMatches = default, int offset = default, Object options = default, bool profile = default, Object sort = default, Object source = default, bool trackScores = default)
        {
            // to ensure "table" is required (not null)
            if (table == null)
            {
                throw new ArgumentNullException("table is a required property for SearchRequest and cannot be null");
            }
            this.Table = table;
            this.Query = query;
            this.Join = join;
            this.Highlight = highlight;
            this.Limit = limit;
            this.Knn = knn;
            this.Aggs = aggs;
            this.Expressions = expressions;
            this.MaxMatches = maxMatches;
            this.Offset = offset;
            this.Options = options;
            this.Profile = profile;
            this.Sort = sort;
            this.Source = source;
            this.TrackScores = trackScores;
        }

        /// <summary>
        /// The table to perform the search on
        /// </summary>
        /// <value>The table to perform the search on</value>
        [DataMember(Name = "table", IsRequired = true, EmitDefaultValue = true)]
        public string Table { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public SearchQuery Query { get; set; }

        /// <summary>
        /// Join clause to combine search data from multiple tables
        /// </summary>
        /// <value>Join clause to combine search data from multiple tables</value>
        [DataMember(Name = "join", EmitDefaultValue = false)]
        public List<Join> Join { get; set; }

        /// <summary>
        /// Gets or Sets Highlight
        /// </summary>
        [DataMember(Name = "highlight", EmitDefaultValue = false)]
        public Highlight Highlight { get; set; }

        /// <summary>
        /// Maximum number of results to return
        /// </summary>
        /// <value>Maximum number of results to return</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Knn
        /// </summary>
        [DataMember(Name = "knn", EmitDefaultValue = false)]
        public KnnQuery Knn { get; set; }

        /// <summary>
        /// Defines aggregation settings for grouping results
        /// </summary>
        /// <value>Defines aggregation settings for grouping results</value>
        /*
        <example>{agg1&#x3D;{terms&#x3D;{field&#x3D;field1, size&#x3D;1000, sort&#x3D;[{field1&#x3D;null, order&#x3D;asc}]}}}</example>
        */
        [DataMember(Name = "aggs", EmitDefaultValue = false)]
        public Dictionary<string, Aggregation> Aggs { get; set; }

        /// <summary>
        /// Expressions to calculate additional values for the result
        /// </summary>
        /// <value>Expressions to calculate additional values for the result</value>
        /*
        <example>{title_len&#x3D;crc32(title)}</example>
        */
        [DataMember(Name = "expressions", EmitDefaultValue = false)]
        public Dictionary<string, string> Expressions { get; set; }

        /// <summary>
        /// Maximum number of matches allowed in the result
        /// </summary>
        /// <value>Maximum number of matches allowed in the result</value>
        [DataMember(Name = "max_matches", EmitDefaultValue = false)]
        public int MaxMatches { get; set; }

        /// <summary>
        /// Starting point for pagination of the result
        /// </summary>
        /// <value>Starting point for pagination of the result</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Additional search options
        /// </summary>
        /// <value>Additional search options</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public Object Options { get; set; }

        /// <summary>
        /// Enable or disable profiling of the search request
        /// </summary>
        /// <value>Enable or disable profiling of the search request</value>
        [DataMember(Name = "profile", EmitDefaultValue = true)]
        public bool Profile { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = true)]
        public Object Sort { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "_source", EmitDefaultValue = true)]
        public Object Source { get; set; }

        /// <summary>
        /// Enable or disable result weight calculation used for sorting
        /// </summary>
        /// <value>Enable or disable result weight calculation used for sorting</value>
        [DataMember(Name = "track_scores", EmitDefaultValue = true)]
        public bool TrackScores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRequest {\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Join: ").Append(Join).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Knn: ").Append(Knn).Append("\n");
            sb.Append("  Aggs: ").Append(Aggs).Append("\n");
            sb.Append("  Expressions: ").Append(Expressions).Append("\n");
            sb.Append("  MaxMatches: ").Append(MaxMatches).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TrackScores: ").Append(TrackScores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
