/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Options for controlling the behavior of highlighting on a per-field basis
    /// </summary>
    [DataContract(Name = "highlightFieldOption")]
    public partial class HighlightFieldOption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HighlightFieldOption" /> class.
        /// </summary>
        /// <param name="fragmentSize">Maximum size of the text fragments in highlighted snippets per field.</param>
        /// <param name="limit">Maximum size of snippets per field.</param>
        /// <param name="limitSnippets">Maximum number of snippets per field.</param>
        /// <param name="limitWords">Maximum number of words per field.</param>
        /// <param name="numberOfFragments">Total number of highlighted fragments per field.</param>
        public HighlightFieldOption(int fragmentSize = default, int limit = default, int limitSnippets = default, int limitWords = default, int numberOfFragments = default)
        {
            this.FragmentSize = fragmentSize;
            this.Limit = limit;
            this.LimitSnippets = limitSnippets;
            this.LimitWords = limitWords;
            this.NumberOfFragments = numberOfFragments;
        }

        /// <summary>
        /// Maximum size of the text fragments in highlighted snippets per field
        /// </summary>
        /// <value>Maximum size of the text fragments in highlighted snippets per field</value>
        [DataMember(Name = "fragment_size", EmitDefaultValue = false)]
        public int FragmentSize { get; set; }

        /// <summary>
        /// Maximum size of snippets per field
        /// </summary>
        /// <value>Maximum size of snippets per field</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Maximum number of snippets per field
        /// </summary>
        /// <value>Maximum number of snippets per field</value>
        [DataMember(Name = "limit_snippets", EmitDefaultValue = false)]
        public int LimitSnippets { get; set; }

        /// <summary>
        /// Maximum number of words per field
        /// </summary>
        /// <value>Maximum number of words per field</value>
        [DataMember(Name = "limit_words", EmitDefaultValue = false)]
        public int LimitWords { get; set; }

        /// <summary>
        /// Total number of highlighted fragments per field
        /// </summary>
        /// <value>Total number of highlighted fragments per field</value>
        [DataMember(Name = "number_of_fragments", EmitDefaultValue = false)]
        public int NumberOfFragments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HighlightFieldOption {\n");
            sb.Append("  FragmentSize: ").Append(FragmentSize).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  LimitSnippets: ").Append(LimitSnippets).Append("\n");
            sb.Append("  LimitWords: ").Append(LimitWords).Append("\n");
            sb.Append("  NumberOfFragments: ").Append(NumberOfFragments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
