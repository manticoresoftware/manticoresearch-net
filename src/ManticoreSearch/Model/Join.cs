/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Join
    /// </summary>
    [DataContract(Name = "join")]
    public partial class Join : IValidatableObject
    {
        /// <summary>
        /// Type of the join operation
        /// </summary>
        /// <value>Type of the join operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Inner for value: inner
            /// </summary>
            [EnumMember(Value = "inner")]
            Inner = 1,

            /// <summary>
            /// Enum Left for value: left
            /// </summary>
            [EnumMember(Value = "left")]
            Left = 2
        }


        /// <summary>
        /// Type of the join operation
        /// </summary>
        /// <value>Type of the join operation</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Join" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Join() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Join" /> class.
        /// </summary>
        /// <param name="Type">Type of the join operation (required).</param>
        /// <param name="On">List of objects defining joined tables (required).</param>
        /// <param name="Query">Query.</param>
        /// <param name="Table">Basic table of the join operation (required).</param>
        public Join(TypeEnum Type = default(TypeEnum), List<JoinOn> On = default(List<JoinOn>), FulltextFilter Query = default(FulltextFilter), string Table = default(string))
        {
            this.Type = Type;
            // to ensure "On" is required (not null)
            if (On == null)
            {
                throw new ArgumentNullException("On is a required property for Join and cannot be null");
            }
            this.On = On;
            // to ensure "Table" is required (not null)
            if (Table == null)
            {
                throw new ArgumentNullException("Table is a required property for Join and cannot be null");
            }
            this.Table = Table;
            this.Query = Query;
        }

        /// <summary>
        /// List of objects defining joined tables
        /// </summary>
        /// <value>List of objects defining joined tables</value>
        [DataMember(Name = "on", IsRequired = true, EmitDefaultValue = true)]
        public List<JoinOn> On { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public FulltextFilter Query { get; set; }

        /// <summary>
        /// Basic table of the join operation
        /// </summary>
        /// <value>Basic table of the join operation</value>
        [DataMember(Name = "table", IsRequired = true, EmitDefaultValue = true)]
        public string Table { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Join {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
