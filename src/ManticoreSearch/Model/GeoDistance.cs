/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Object to perform geo-distance based filtering on queries
    /// </summary>
    [DataContract(Name = "geoDistance")]
    public partial class GeoDistance : IValidatableObject
    {
        /// <summary>
        /// Algorithm used to calculate the distance
        /// </summary>
        /// <value>Algorithm used to calculate the distance</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DistanceTypeEnum
        {
            /// <summary>
            /// Enum Adaptive for value: adaptive
            /// </summary>
            Adaptive = 1,

            /// <summary>
            /// Enum Haversine for value: haversine
            /// </summary>
            Haversine = 2
        }


        /// <summary>
        /// Algorithm used to calculate the distance
        /// </summary>
        /// <value>Algorithm used to calculate the distance</value>
        [DataMember(Name = "distance_type", EmitDefaultValue = true)]
        public DistanceTypeEnum? DistanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeoDistance" /> class.
        /// </summary>
        /// <param name="LocationAnchor">LocationAnchor.</param>
        /// <param name="LocationSource">Field name in the document that contains location data.</param>
        /// <param name="DistanceType">Algorithm used to calculate the distance.</param>
        /// <param name="Distance">The distance from the anchor point to filter results by.</param>
        public GeoDistance(GeoDistanceLocationAnchor LocationAnchor = default(GeoDistanceLocationAnchor), String LocationSource = default(String), DistanceTypeEnum? DistanceType = default(DistanceTypeEnum?), String Distance = default(String))
        {
            this.LocationAnchor = LocationAnchor;
            this.LocationSource = LocationSource;
            this.DistanceType = DistanceType;
            this.Distance = Distance;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets LocationAnchor
        /// </summary>
        [DataMember(Name = "location_anchor", EmitDefaultValue = false)]
        public GeoDistanceLocationAnchor LocationAnchor { get; set; }

        /// <summary>
        /// Field name in the document that contains location data
        /// </summary>
        /// <value>Field name in the document that contains location data</value>
        [DataMember(Name = "location_source", EmitDefaultValue = true)]
        public String LocationSource { get; set; }

        /// <summary>
        /// The distance from the anchor point to filter results by
        /// </summary>
        /// <value>The distance from the anchor point to filter results by</value>
        [DataMember(Name = "distance", EmitDefaultValue = true)]
        public String Distance { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeoDistance {\n");
            sb.Append("  LocationAnchor: ").Append(LocationAnchor).Append("\n");
            sb.Append("  LocationSource: ").Append(LocationSource).Append("\n");
            sb.Append("  DistanceType: ").Append(DistanceType).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Distance != null) {
                // Distance (String) pattern
                Regex regexDistance = new Regex(@"^\.+(km|m|cm|mm|mi|yd|ft|in|NM|nmi|kilometers|meters|centimeters|millimeters|miles|yards|foots|inches|nauticalmiles|)$", RegexOptions.CultureInvariant);
                if (!regexDistance.Match(this.Distance).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must match a pattern of " + regexDistance, new [] { "Distance" });
                }
            }

            yield break;
        }
    }

}
