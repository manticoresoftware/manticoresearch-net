/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Highlight
    /// </summary>
    [DataContract(Name = "highlight")]
    public partial class Highlight : IValidatableObject
    {
        /// <summary>
        /// If set to &#39;html&#39;, retains HTML markup when highlighting
        /// </summary>
        /// <value>If set to &#39;html&#39;, retains HTML markup when highlighting</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EncoderEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 2
        }


        /// <summary>
        /// If set to &#39;html&#39;, retains HTML markup when highlighting
        /// </summary>
        /// <value>If set to &#39;html&#39;, retains HTML markup when highlighting</value>
        [DataMember(Name = "encoder", EmitDefaultValue = false)]
        public EncoderEnum? Encoder { get; set; }
        /// <summary>
        /// Defines the mode for handling HTML markup in the highlight
        /// </summary>
        /// <value>Defines the mode for handling HTML markup in the highlight</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HtmlStripModeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Strip for value: strip
            /// </summary>
            [EnumMember(Value = "strip")]
            Strip = 2,

            /// <summary>
            /// Enum Index for value: index
            /// </summary>
            [EnumMember(Value = "index")]
            Index = 3,

            /// <summary>
            /// Enum Retain for value: retain
            /// </summary>
            [EnumMember(Value = "retain")]
            Retain = 4
        }


        /// <summary>
        /// Defines the mode for handling HTML markup in the highlight
        /// </summary>
        /// <value>Defines the mode for handling HTML markup in the highlight</value>
        [DataMember(Name = "html_strip_mode", EmitDefaultValue = false)]
        public HtmlStripModeEnum? HtmlStripMode { get; set; }
        /// <summary>
        /// If set to 1, allows an empty string to be returned as a highlighting result
        /// </summary>
        /// <value>If set to 1, allows an empty string to be returned as a highlighting result</value>
        public enum NoMatchSizeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1
        }


        /// <summary>
        /// If set to 1, allows an empty string to be returned as a highlighting result
        /// </summary>
        /// <value>If set to 1, allows an empty string to be returned as a highlighting result</value>
        [DataMember(Name = "no_match_size", EmitDefaultValue = false)]
        public NoMatchSizeEnum? NoMatchSize { get; set; }
        /// <summary>
        /// Sets the sorting order of highlighted snippets
        /// </summary>
        /// <value>Sets the sorting order of highlighted snippets</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderEnum
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            [EnumMember(Value = "asc")]
            Asc = 1,

            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            [EnumMember(Value = "desc")]
            Desc = 2,

            /// <summary>
            /// Enum Score for value: score
            /// </summary>
            [EnumMember(Value = "score")]
            Score = 3
        }


        /// <summary>
        /// Sets the sorting order of highlighted snippets
        /// </summary>
        /// <value>Sets the sorting order of highlighted snippets</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public OrderEnum? Order { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Highlight" /> class.
        /// </summary>
        /// <param name="fragmentSize">Maximum size of the text fragments in highlighted snippets per field.</param>
        /// <param name="limit">Maximum size of snippets per field.</param>
        /// <param name="limitSnippets">Maximum number of snippets per field.</param>
        /// <param name="limitWords">Maximum number of words per field.</param>
        /// <param name="numberOfFragments">Total number of highlighted fragments per field.</param>
        /// <param name="afterMatch">Text inserted after the matched term, typically used for HTML formatting (default to &quot;&lt;/strong&gt;&quot;).</param>
        /// <param name="allowEmpty">Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned.</param>
        /// <param name="around">Number of words around the match to include in the highlight.</param>
        /// <param name="beforeMatch">Text inserted before the match, typically used for HTML formatting (default to &quot;&lt;strong&gt;&quot;).</param>
        /// <param name="emitZones">Emits an HTML tag with the enclosing zone name before each highlighted snippet.</param>
        /// <param name="encoder">If set to &#39;html&#39;, retains HTML markup when highlighting.</param>
        /// <param name="fields">fields.</param>
        /// <param name="forceAllWords">Ignores the length limit until the result includes all keywords.</param>
        /// <param name="forceSnippets">Forces snippet generation even if limits allow highlighting the entire text.</param>
        /// <param name="highlightQuery">highlightQuery.</param>
        /// <param name="htmlStripMode">Defines the mode for handling HTML markup in the highlight.</param>
        /// <param name="limitsPerField">Determines whether the &#39;limit&#39;, &#39;limit_words&#39;, and &#39;limit_snippets&#39; options operate as individual limits in each field of the document.</param>
        /// <param name="noMatchSize">If set to 1, allows an empty string to be returned as a highlighting result.</param>
        /// <param name="order">Sets the sorting order of highlighted snippets.</param>
        /// <param name="preTags">Text inserted before each highlighted snippet (default to &quot;&lt;strong&gt;&quot;).</param>
        /// <param name="postTags">Text inserted after each highlighted snippet (default to &quot;&lt;/strong&gt;&quot;).</param>
        /// <param name="startSnippetId">Sets the starting value of the %SNIPPET_ID% macro.</param>
        /// <param name="useBoundaries">Defines whether to additionally break snippets by phrase boundary characters.</param>
        public Highlight(int fragmentSize = default, int limit = default, int limitSnippets = default, int limitWords = default, int numberOfFragments = default, string afterMatch = @"</strong>", bool allowEmpty = default, int around = default, string beforeMatch = @"<strong>", bool emitZones = default, EncoderEnum? encoder = default, HighlightFields fields = default, bool forceAllWords = default, bool forceSnippets = default, QueryFilter highlightQuery = default, HtmlStripModeEnum? htmlStripMode = default, bool limitsPerField = default, NoMatchSizeEnum? noMatchSize = default, OrderEnum? order = default, string preTags = @"<strong>", string postTags = @"</strong>", int startSnippetId = default, bool useBoundaries = default)
        {
            this.FragmentSize = fragmentSize;
            this.Limit = limit;
            this.LimitSnippets = limitSnippets;
            this.LimitWords = limitWords;
            this.NumberOfFragments = numberOfFragments;
            // use default value if no "afterMatch" provided
            this.AfterMatch = afterMatch ?? @"</strong>";
            this.AllowEmpty = allowEmpty;
            this.Around = around;
            // use default value if no "beforeMatch" provided
            this.BeforeMatch = beforeMatch ?? @"<strong>";
            this.EmitZones = emitZones;
            this.Encoder = encoder;
            this.Fields = fields;
            this.ForceAllWords = forceAllWords;
            this.ForceSnippets = forceSnippets;
            this.HighlightQuery = highlightQuery;
            this.HtmlStripMode = htmlStripMode;
            this.LimitsPerField = limitsPerField;
            this.NoMatchSize = noMatchSize;
            this.Order = order;
            // use default value if no "preTags" provided
            this.PreTags = preTags ?? @"<strong>";
            // use default value if no "postTags" provided
            this.PostTags = postTags ?? @"</strong>";
            this.StartSnippetId = startSnippetId;
            this.UseBoundaries = useBoundaries;
        }

        /// <summary>
        /// Maximum size of the text fragments in highlighted snippets per field
        /// </summary>
        /// <value>Maximum size of the text fragments in highlighted snippets per field</value>
        [DataMember(Name = "fragment_size", EmitDefaultValue = false)]
        public int FragmentSize { get; set; }

        /// <summary>
        /// Maximum size of snippets per field
        /// </summary>
        /// <value>Maximum size of snippets per field</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Maximum number of snippets per field
        /// </summary>
        /// <value>Maximum number of snippets per field</value>
        [DataMember(Name = "limit_snippets", EmitDefaultValue = false)]
        public int LimitSnippets { get; set; }

        /// <summary>
        /// Maximum number of words per field
        /// </summary>
        /// <value>Maximum number of words per field</value>
        [DataMember(Name = "limit_words", EmitDefaultValue = false)]
        public int LimitWords { get; set; }

        /// <summary>
        /// Total number of highlighted fragments per field
        /// </summary>
        /// <value>Total number of highlighted fragments per field</value>
        [DataMember(Name = "number_of_fragments", EmitDefaultValue = false)]
        public int NumberOfFragments { get; set; }

        /// <summary>
        /// Text inserted after the matched term, typically used for HTML formatting
        /// </summary>
        /// <value>Text inserted after the matched term, typically used for HTML formatting</value>
        [DataMember(Name = "after_match", EmitDefaultValue = false)]
        public string AfterMatch { get; set; }

        /// <summary>
        /// Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned
        /// </summary>
        /// <value>Permits an empty string to be returned as the highlighting result. Otherwise, the beginning of the original text would be returned</value>
        [DataMember(Name = "allow_empty", EmitDefaultValue = true)]
        public bool AllowEmpty { get; set; }

        /// <summary>
        /// Number of words around the match to include in the highlight
        /// </summary>
        /// <value>Number of words around the match to include in the highlight</value>
        [DataMember(Name = "around", EmitDefaultValue = false)]
        public int Around { get; set; }

        /// <summary>
        /// Text inserted before the match, typically used for HTML formatting
        /// </summary>
        /// <value>Text inserted before the match, typically used for HTML formatting</value>
        [DataMember(Name = "before_match", EmitDefaultValue = false)]
        public string BeforeMatch { get; set; }

        /// <summary>
        /// Emits an HTML tag with the enclosing zone name before each highlighted snippet
        /// </summary>
        /// <value>Emits an HTML tag with the enclosing zone name before each highlighted snippet</value>
        [DataMember(Name = "emit_zones", EmitDefaultValue = true)]
        public bool EmitZones { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public HighlightFields Fields { get; set; }

        /// <summary>
        /// Ignores the length limit until the result includes all keywords
        /// </summary>
        /// <value>Ignores the length limit until the result includes all keywords</value>
        [DataMember(Name = "force_all_words", EmitDefaultValue = true)]
        public bool ForceAllWords { get; set; }

        /// <summary>
        /// Forces snippet generation even if limits allow highlighting the entire text
        /// </summary>
        /// <value>Forces snippet generation even if limits allow highlighting the entire text</value>
        [DataMember(Name = "force_snippets", EmitDefaultValue = true)]
        public bool ForceSnippets { get; set; }

        /// <summary>
        /// Gets or Sets HighlightQuery
        /// </summary>
        [DataMember(Name = "highlight_query", EmitDefaultValue = false)]
        public QueryFilter HighlightQuery { get; set; }

        /// <summary>
        /// Determines whether the &#39;limit&#39;, &#39;limit_words&#39;, and &#39;limit_snippets&#39; options operate as individual limits in each field of the document
        /// </summary>
        /// <value>Determines whether the &#39;limit&#39;, &#39;limit_words&#39;, and &#39;limit_snippets&#39; options operate as individual limits in each field of the document</value>
        [DataMember(Name = "limits_per_field", EmitDefaultValue = true)]
        public bool LimitsPerField { get; set; }

        /// <summary>
        /// Text inserted before each highlighted snippet
        /// </summary>
        /// <value>Text inserted before each highlighted snippet</value>
        [DataMember(Name = "pre_tags", EmitDefaultValue = false)]
        public string PreTags { get; set; }

        /// <summary>
        /// Text inserted after each highlighted snippet
        /// </summary>
        /// <value>Text inserted after each highlighted snippet</value>
        [DataMember(Name = "post_tags", EmitDefaultValue = false)]
        public string PostTags { get; set; }

        /// <summary>
        /// Sets the starting value of the %SNIPPET_ID% macro
        /// </summary>
        /// <value>Sets the starting value of the %SNIPPET_ID% macro</value>
        [DataMember(Name = "start_snippet_id", EmitDefaultValue = false)]
        public int StartSnippetId { get; set; }

        /// <summary>
        /// Defines whether to additionally break snippets by phrase boundary characters
        /// </summary>
        /// <value>Defines whether to additionally break snippets by phrase boundary characters</value>
        [DataMember(Name = "use_boundaries", EmitDefaultValue = true)]
        public bool UseBoundaries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Highlight {\n");
            sb.Append("  FragmentSize: ").Append(FragmentSize).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  LimitSnippets: ").Append(LimitSnippets).Append("\n");
            sb.Append("  LimitWords: ").Append(LimitWords).Append("\n");
            sb.Append("  NumberOfFragments: ").Append(NumberOfFragments).Append("\n");
            sb.Append("  AfterMatch: ").Append(AfterMatch).Append("\n");
            sb.Append("  AllowEmpty: ").Append(AllowEmpty).Append("\n");
            sb.Append("  Around: ").Append(Around).Append("\n");
            sb.Append("  BeforeMatch: ").Append(BeforeMatch).Append("\n");
            sb.Append("  EmitZones: ").Append(EmitZones).Append("\n");
            sb.Append("  Encoder: ").Append(Encoder).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  ForceAllWords: ").Append(ForceAllWords).Append("\n");
            sb.Append("  ForceSnippets: ").Append(ForceSnippets).Append("\n");
            sb.Append("  HighlightQuery: ").Append(HighlightQuery).Append("\n");
            sb.Append("  HtmlStripMode: ").Append(HtmlStripMode).Append("\n");
            sb.Append("  LimitsPerField: ").Append(LimitsPerField).Append("\n");
            sb.Append("  NoMatchSize: ").Append(NoMatchSize).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  PreTags: ").Append(PreTags).Append("\n");
            sb.Append("  PostTags: ").Append(PostTags).Append("\n");
            sb.Append("  StartSnippetId: ").Append(StartSnippetId).Append("\n");
            sb.Append("  UseBoundaries: ").Append(UseBoundaries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
