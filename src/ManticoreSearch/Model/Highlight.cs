/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Query HIGHLIGHT expression
    /// </summary>
    [DataContract(Name = "highlight")]
    public partial class Highlight : IEquatable<Highlight>, IValidatableObject
    {
        /// <summary>
        /// Defines Encoder
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EncoderEnum
        {
            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 1,

            /// <summary>
            /// Enum Html for value: html
            /// </summary>
            [EnumMember(Value = "html")]
            Html = 2

        }


        /// <summary>
        /// Gets or Sets Encoder
        /// </summary>
        [DataMember(Name = "encoder", EmitDefaultValue = false)]
        public EncoderEnum? Encoder { get; set; }
        /// <summary>
        /// Defines NoMatchSize
        /// </summary>
        public enum NoMatchSizeEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1

        }


        /// <summary>
        /// Gets or Sets NoMatchSize
        /// </summary>
        [DataMember(Name = "no_match_size", EmitDefaultValue = false)]
        public NoMatchSizeEnum? NoMatchSize { get; set; }
        /// <summary>
        /// Defines HtmlStripMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HtmlStripModeEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,

            /// <summary>
            /// Enum Strip for value: strip
            /// </summary>
            [EnumMember(Value = "strip")]
            Strip = 2,

            /// <summary>
            /// Enum Index for value: index
            /// </summary>
            [EnumMember(Value = "index")]
            Index = 3,

            /// <summary>
            /// Enum Retain for value: retain
            /// </summary>
            [EnumMember(Value = "retain")]
            Retain = 4

        }


        /// <summary>
        /// Gets or Sets HtmlStripMode
        /// </summary>
        [DataMember(Name = "html_strip_mode", EmitDefaultValue = false)]
        public HtmlStripModeEnum? HtmlStripMode { get; set; }
        /// <summary>
        /// Defines SnippetBoundary
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SnippetBoundaryEnum
        {
            /// <summary>
            /// Enum Sentence for value: sentence
            /// </summary>
            [EnumMember(Value = "sentence")]
            Sentence = 1,

            /// <summary>
            /// Enum Paragraph for value: paragraph
            /// </summary>
            [EnumMember(Value = "paragraph")]
            Paragraph = 2,

            /// <summary>
            /// Enum Zone for value: zone
            /// </summary>
            [EnumMember(Value = "zone")]
            Zone = 3

        }


        /// <summary>
        /// Gets or Sets SnippetBoundary
        /// </summary>
        [DataMember(Name = "snippet_boundary", EmitDefaultValue = false)]
        public SnippetBoundaryEnum? SnippetBoundary { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Highlight" /> class.
        /// </summary>
        /// <param name="fieldnames">fieldnames.</param>
        /// <param name="fields">fields.</param>
        /// <param name="encoder">encoder.</param>
        /// <param name="highlightQuery">highlightQuery.</param>
        /// <param name="preTags">preTags (default to &quot;&lt;strong&gt;&quot;).</param>
        /// <param name="postTags">postTags (default to &quot;&lt;/strong&gt;&quot;).</param>
        /// <param name="noMatchSize">noMatchSize.</param>
        /// <param name="fragmentSize">fragmentSize (default to 256).</param>
        /// <param name="numberOfFragments">numberOfFragments (default to 0).</param>
        /// <param name="limit">limit (default to 256).</param>
        /// <param name="limitWords">limitWords (default to 0).</param>
        /// <param name="limitSnippets">limitSnippets (default to 0).</param>
        /// <param name="limitsPerField">limitsPerField (default to false).</param>
        /// <param name="useBoundaries">useBoundaries (default to false).</param>
        /// <param name="forceAllWords">forceAllWords (default to false).</param>
        /// <param name="allowEmpty">allowEmpty (default to false).</param>
        /// <param name="emitZones">emitZones (default to false).</param>
        /// <param name="forceSnippets">forceSnippets (default to false).</param>
        /// <param name="around">around (default to 5).</param>
        /// <param name="startSnippetId">startSnippetId (default to 1).</param>
        /// <param name="htmlStripMode">htmlStripMode.</param>
        /// <param name="snippetBoundary">snippetBoundary.</param>
        public Highlight(List<string> fieldnames = default(List<string>), List<HighlightField> fields = default(List<HighlightField>), EncoderEnum? encoder = default(EncoderEnum?), Dictionary<string, Object> highlightQuery = default(Dictionary<string, Object>), string preTags = "<strong>", string postTags = "</strong>", NoMatchSizeEnum? noMatchSize = default(NoMatchSizeEnum?), int fragmentSize = 256, int numberOfFragments = 0, int limit = 256, int limitWords = 0, int limitSnippets = 0, bool limitsPerField = false, bool useBoundaries = false, bool forceAllWords = false, bool allowEmpty = false, bool emitZones = false, bool forceSnippets = false, int around = 5, int startSnippetId = 1, HtmlStripModeEnum? htmlStripMode = default(HtmlStripModeEnum?), SnippetBoundaryEnum? snippetBoundary = default(SnippetBoundaryEnum?))
        {
            this.Fieldnames = fieldnames;
            this.Fields = fields;
            this.Encoder = encoder;
            this.HighlightQuery = highlightQuery;
            // use default value if no "preTags" provided
            this.PreTags = preTags ?? "<strong>";
            // use default value if no "postTags" provided
            this.PostTags = postTags ?? "</strong>";
            this.NoMatchSize = noMatchSize;
            this.FragmentSize = fragmentSize;
            this.NumberOfFragments = numberOfFragments;
            this.Limit = limit;
            this.LimitWords = limitWords;
            this.LimitSnippets = limitSnippets;
            this.LimitsPerField = limitsPerField;
            this.UseBoundaries = useBoundaries;
            this.ForceAllWords = forceAllWords;
            this.AllowEmpty = allowEmpty;
            this.EmitZones = emitZones;
            this.ForceSnippets = forceSnippets;
            this.Around = around;
            this.StartSnippetId = startSnippetId;
            this.HtmlStripMode = htmlStripMode;
            this.SnippetBoundary = snippetBoundary;
        }

        /// <summary>
        /// Gets or Sets Fieldnames
        /// </summary>
        [DataMember(Name = "fieldnames", EmitDefaultValue = false)]
        public List<string> Fieldnames { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<HighlightField> Fields { get; set; }

        /// <summary>
        /// Gets or Sets HighlightQuery
        /// </summary>
        [DataMember(Name = "highlight_query", EmitDefaultValue = true)]
        public Dictionary<string, Object> HighlightQuery { get; set; }

        /// <summary>
        /// Gets or Sets PreTags
        /// </summary>
        [DataMember(Name = "pre_tags", EmitDefaultValue = false)]
        public string PreTags { get; set; }

        /// <summary>
        /// Gets or Sets PostTags
        /// </summary>
        [DataMember(Name = "post_tags", EmitDefaultValue = false)]
        public string PostTags { get; set; }

        /// <summary>
        /// Gets or Sets FragmentSize
        /// </summary>
        [DataMember(Name = "fragment_size", EmitDefaultValue = false)]
        public int FragmentSize { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfFragments
        /// </summary>
        [DataMember(Name = "number_of_fragments", EmitDefaultValue = false)]
        public int NumberOfFragments { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets LimitWords
        /// </summary>
        [DataMember(Name = "limit_words", EmitDefaultValue = false)]
        public int LimitWords { get; set; }

        /// <summary>
        /// Gets or Sets LimitSnippets
        /// </summary>
        [DataMember(Name = "limit_snippets", EmitDefaultValue = false)]
        public int LimitSnippets { get; set; }

        /// <summary>
        /// Gets or Sets LimitsPerField
        /// </summary>
        [DataMember(Name = "limits_per_field", EmitDefaultValue = true)]
        public bool LimitsPerField { get; set; }

        /// <summary>
        /// Gets or Sets UseBoundaries
        /// </summary>
        [DataMember(Name = "use_boundaries", EmitDefaultValue = true)]
        public bool UseBoundaries { get; set; }

        /// <summary>
        /// Gets or Sets ForceAllWords
        /// </summary>
        [DataMember(Name = "force_all_words", EmitDefaultValue = true)]
        public bool ForceAllWords { get; set; }

        /// <summary>
        /// Gets or Sets AllowEmpty
        /// </summary>
        [DataMember(Name = "allow_empty", EmitDefaultValue = true)]
        public bool AllowEmpty { get; set; }

        /// <summary>
        /// Gets or Sets EmitZones
        /// </summary>
        [DataMember(Name = "emit_zones", EmitDefaultValue = true)]
        public bool EmitZones { get; set; }

        /// <summary>
        /// Gets or Sets ForceSnippets
        /// </summary>
        [DataMember(Name = "force_snippets", EmitDefaultValue = true)]
        public bool ForceSnippets { get; set; }

        /// <summary>
        /// Gets or Sets Around
        /// </summary>
        [DataMember(Name = "around", EmitDefaultValue = false)]
        public int Around { get; set; }

        /// <summary>
        /// Gets or Sets StartSnippetId
        /// </summary>
        [DataMember(Name = "start_snippet_id", EmitDefaultValue = false)]
        public int StartSnippetId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Highlight {\n");
            sb.Append("  Fieldnames: ").Append(Fieldnames).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Encoder: ").Append(Encoder).Append("\n");
            sb.Append("  HighlightQuery: ").Append(HighlightQuery).Append("\n");
            sb.Append("  PreTags: ").Append(PreTags).Append("\n");
            sb.Append("  PostTags: ").Append(PostTags).Append("\n");
            sb.Append("  NoMatchSize: ").Append(NoMatchSize).Append("\n");
            sb.Append("  FragmentSize: ").Append(FragmentSize).Append("\n");
            sb.Append("  NumberOfFragments: ").Append(NumberOfFragments).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  LimitWords: ").Append(LimitWords).Append("\n");
            sb.Append("  LimitSnippets: ").Append(LimitSnippets).Append("\n");
            sb.Append("  LimitsPerField: ").Append(LimitsPerField).Append("\n");
            sb.Append("  UseBoundaries: ").Append(UseBoundaries).Append("\n");
            sb.Append("  ForceAllWords: ").Append(ForceAllWords).Append("\n");
            sb.Append("  AllowEmpty: ").Append(AllowEmpty).Append("\n");
            sb.Append("  EmitZones: ").Append(EmitZones).Append("\n");
            sb.Append("  ForceSnippets: ").Append(ForceSnippets).Append("\n");
            sb.Append("  Around: ").Append(Around).Append("\n");
            sb.Append("  StartSnippetId: ").Append(StartSnippetId).Append("\n");
            sb.Append("  HtmlStripMode: ").Append(HtmlStripMode).Append("\n");
            sb.Append("  SnippetBoundary: ").Append(SnippetBoundary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Highlight);
        }

        /// <summary>
        /// Returns true if Highlight instances are equal
        /// </summary>
        /// <param name="input">Instance of Highlight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Highlight input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fieldnames == input.Fieldnames ||
                    this.Fieldnames != null &&
                    input.Fieldnames != null &&
                    this.Fieldnames.SequenceEqual(input.Fieldnames)
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Encoder == input.Encoder ||
                    this.Encoder.Equals(input.Encoder)
                ) && 
                (
                    this.HighlightQuery == input.HighlightQuery ||
                    this.HighlightQuery != null &&
                    input.HighlightQuery != null &&
                    this.HighlightQuery.SequenceEqual(input.HighlightQuery)
                ) && 
                (
                    this.PreTags == input.PreTags ||
                    (this.PreTags != null &&
                    this.PreTags.Equals(input.PreTags))
                ) && 
                (
                    this.PostTags == input.PostTags ||
                    (this.PostTags != null &&
                    this.PostTags.Equals(input.PostTags))
                ) && 
                (
                    this.NoMatchSize == input.NoMatchSize ||
                    this.NoMatchSize.Equals(input.NoMatchSize)
                ) && 
                (
                    this.FragmentSize == input.FragmentSize ||
                    this.FragmentSize.Equals(input.FragmentSize)
                ) && 
                (
                    this.NumberOfFragments == input.NumberOfFragments ||
                    this.NumberOfFragments.Equals(input.NumberOfFragments)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.LimitWords == input.LimitWords ||
                    this.LimitWords.Equals(input.LimitWords)
                ) && 
                (
                    this.LimitSnippets == input.LimitSnippets ||
                    this.LimitSnippets.Equals(input.LimitSnippets)
                ) && 
                (
                    this.LimitsPerField == input.LimitsPerField ||
                    this.LimitsPerField.Equals(input.LimitsPerField)
                ) && 
                (
                    this.UseBoundaries == input.UseBoundaries ||
                    this.UseBoundaries.Equals(input.UseBoundaries)
                ) && 
                (
                    this.ForceAllWords == input.ForceAllWords ||
                    this.ForceAllWords.Equals(input.ForceAllWords)
                ) && 
                (
                    this.AllowEmpty == input.AllowEmpty ||
                    this.AllowEmpty.Equals(input.AllowEmpty)
                ) && 
                (
                    this.EmitZones == input.EmitZones ||
                    this.EmitZones.Equals(input.EmitZones)
                ) && 
                (
                    this.ForceSnippets == input.ForceSnippets ||
                    this.ForceSnippets.Equals(input.ForceSnippets)
                ) && 
                (
                    this.Around == input.Around ||
                    this.Around.Equals(input.Around)
                ) && 
                (
                    this.StartSnippetId == input.StartSnippetId ||
                    this.StartSnippetId.Equals(input.StartSnippetId)
                ) && 
                (
                    this.HtmlStripMode == input.HtmlStripMode ||
                    this.HtmlStripMode.Equals(input.HtmlStripMode)
                ) && 
                (
                    this.SnippetBoundary == input.SnippetBoundary ||
                    this.SnippetBoundary.Equals(input.SnippetBoundary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fieldnames != null)
                {
                    hashCode = (hashCode * 59) + this.Fieldnames.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Encoder.GetHashCode();
                if (this.HighlightQuery != null)
                {
                    hashCode = (hashCode * 59) + this.HighlightQuery.GetHashCode();
                }
                if (this.PreTags != null)
                {
                    hashCode = (hashCode * 59) + this.PreTags.GetHashCode();
                }
                if (this.PostTags != null)
                {
                    hashCode = (hashCode * 59) + this.PostTags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NoMatchSize.GetHashCode();
                hashCode = (hashCode * 59) + this.FragmentSize.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfFragments.GetHashCode();
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitWords.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitSnippets.GetHashCode();
                hashCode = (hashCode * 59) + this.LimitsPerField.GetHashCode();
                hashCode = (hashCode * 59) + this.UseBoundaries.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceAllWords.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowEmpty.GetHashCode();
                hashCode = (hashCode * 59) + this.EmitZones.GetHashCode();
                hashCode = (hashCode * 59) + this.ForceSnippets.GetHashCode();
                hashCode = (hashCode * 59) + this.Around.GetHashCode();
                hashCode = (hashCode * 59) + this.StartSnippetId.GetHashCode();
                hashCode = (hashCode * 59) + this.HtmlStripMode.GetHashCode();
                hashCode = (hashCode * 59) + this.SnippetBoundary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
