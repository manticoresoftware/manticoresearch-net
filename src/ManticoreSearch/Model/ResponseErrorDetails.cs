/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Detailed error information returned in case of an error response
    /// </summary>
    [DataContract(Name = "responseErrorDetails")]
    public partial class ResponseErrorDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseErrorDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResponseErrorDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseErrorDetails" /> class.
        /// </summary>
        /// <param name="Type">Type or category of the error (required).</param>
        /// <param name="Reason">Detailed explanation of why the error occurred.</param>
        /// <param name="Index">The index related to the error, if applicable.</param>
        public ResponseErrorDetails(string Type = default(string), string Reason = default(string), string Index = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new ArgumentNullException("Type is a required property for ResponseErrorDetails and cannot be null");
            }
            this.Type = Type;
            this.Reason = Reason;
            this.Index = Index;
        }

        /// <summary>
        /// Type or category of the error
        /// </summary>
        /// <value>Type or category of the error</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Detailed explanation of why the error occurred
        /// </summary>
        /// <value>Detailed explanation of why the error occurred</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// The index related to the error, if applicable
        /// </summary>
        /// <value>The index related to the error, if applicable</value>
        [DataMember(Name = "index", EmitDefaultValue = true)]
        public string Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseErrorDetails {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
