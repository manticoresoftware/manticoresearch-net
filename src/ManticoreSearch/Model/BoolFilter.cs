/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Boolean attribute filter
    /// </summary>
    [DataContract(Name = "boolFilter")]
    public partial class BoolFilter : IEquatable<BoolFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BoolFilter" /> class.
        /// </summary>
        /// <param name="should">should.</param>
        /// <param name="must">must.</param>
        /// <param name="mustNot">mustNot.</param>
        public BoolFilter(List<Object> should = default(List<Object>), List<Object> must = default(List<Object>), List<Object> mustNot = default(List<Object>))
        {
            this.Should = should;
            this.Must = must;
            this.MustNot = mustNot;
        }

        /// <summary>
        /// Gets or Sets Should
        /// </summary>
        [DataMember(Name = "should", EmitDefaultValue = false)]
        public List<Object> Should { get; set; }

        /// <summary>
        /// Gets or Sets Must
        /// </summary>
        [DataMember(Name = "must", EmitDefaultValue = false)]
        public List<Object> Must { get; set; }

        /// <summary>
        /// Gets or Sets MustNot
        /// </summary>
        [DataMember(Name = "must_not", EmitDefaultValue = false)]
        public List<Object> MustNot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BoolFilter {\n");
            sb.Append("  Should: ").Append(Should).Append("\n");
            sb.Append("  Must: ").Append(Must).Append("\n");
            sb.Append("  MustNot: ").Append(MustNot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BoolFilter);
        }

        /// <summary>
        /// Returns true if BoolFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of BoolFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BoolFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Should == input.Should ||
                    this.Should != null &&
                    input.Should != null &&
                    this.Should.SequenceEqual(input.Should)
                ) && 
                (
                    this.Must == input.Must ||
                    this.Must != null &&
                    input.Must != null &&
                    this.Must.SequenceEqual(input.Must)
                ) && 
                (
                    this.MustNot == input.MustNot ||
                    this.MustNot != null &&
                    input.MustNot != null &&
                    this.MustNot.SequenceEqual(input.MustNot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Should != null)
                {
                    hashCode = (hashCode * 59) + this.Should.GetHashCode();
                }
                if (this.Must != null)
                {
                    hashCode = (hashCode * 59) + this.Must.GetHashCode();
                }
                if (this.MustNot != null)
                {
                    hashCode = (hashCode * 59) + this.MustNot.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
