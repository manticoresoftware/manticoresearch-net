/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Search hit representing a matched document
    /// </summary>
    [DataContract(Name = "hitsHits")]
    public partial class HitsHits : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HitsHits" /> class.
        /// </summary>
        /// <param name="id">The ID of the matched document.</param>
        /// <param name="score">The score of the matched document.</param>
        /// <param name="source">The source data of the matched document.</param>
        /// <param name="knnDist">The knn distance of the matched document returned for knn queries.</param>
        /// <param name="highlight">The highlighting-related data of the matched document.</param>
        /// <param name="table">The table name of the matched document returned for percolate queries.</param>
        /// <param name="type">The type of the matched document returned for percolate queries.</param>
        /// <param name="fields">The percolate-related fields of the matched document returned for percolate queries.</param>
        public HitsHits(int id = default, int score = default, Object source = default, decimal knnDist = default, Object highlight = default, string table = default, string type = default, Object fields = default)
        {
            this.Id = id;
            this.Score = score;
            this.Source = source;
            this.KnnDist = knnDist;
            this.Highlight = highlight;
            this.Table = table;
            this.Type = type;
            this.Fields = fields;
        }

        /// <summary>
        /// The ID of the matched document
        /// </summary>
        /// <value>The ID of the matched document</value>
        [DataMember(Name = "_id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The score of the matched document
        /// </summary>
        /// <value>The score of the matched document</value>
        [DataMember(Name = "_score", EmitDefaultValue = false)]
        public int Score { get; set; }

        /// <summary>
        /// The source data of the matched document
        /// </summary>
        /// <value>The source data of the matched document</value>
        [DataMember(Name = "_source", EmitDefaultValue = false)]
        public Object Source { get; set; }

        /// <summary>
        /// The knn distance of the matched document returned for knn queries
        /// </summary>
        /// <value>The knn distance of the matched document returned for knn queries</value>
        [DataMember(Name = "_knn_dist", EmitDefaultValue = false)]
        public decimal KnnDist { get; set; }

        /// <summary>
        /// The highlighting-related data of the matched document
        /// </summary>
        /// <value>The highlighting-related data of the matched document</value>
        [DataMember(Name = "highlight", EmitDefaultValue = false)]
        public Object Highlight { get; set; }

        /// <summary>
        /// The table name of the matched document returned for percolate queries
        /// </summary>
        /// <value>The table name of the matched document returned for percolate queries</value>
        [DataMember(Name = "table", EmitDefaultValue = false)]
        public string Table { get; set; }

        /// <summary>
        /// The type of the matched document returned for percolate queries
        /// </summary>
        /// <value>The type of the matched document returned for percolate queries</value>
        [DataMember(Name = "_type:", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The percolate-related fields of the matched document returned for percolate queries
        /// </summary>
        /// <value>The percolate-related fields of the matched document returned for percolate queries</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public Object Fields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HitsHits {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  KnnDist: ").Append(KnnDist).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
