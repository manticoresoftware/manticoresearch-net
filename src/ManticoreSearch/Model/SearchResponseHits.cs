/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Object containing the search hits, which represent the documents that matched the query.
    /// </summary>
    [DataContract(Name = "searchResponse_hits")]
    public partial class SearchResponseHits : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseHits" /> class.
        /// </summary>
        /// <param name="MaxScore">Maximum score among the matched documents.</param>
        /// <param name="Total">Total number of matched documents.</param>
        /// <param name="TotalRelation">Indicates whether the total number of hits is accurate or an estimate.</param>
        /// <param name="Hits">Array of hit objects, each representing a matched document.</param>
        public SearchResponseHits(int MaxScore = default(int), int Total = default(int), string TotalRelation = default(string), List<HitsHits> Hits = default(List<HitsHits>))
        {
            this.MaxScore = MaxScore;
            this.Total = Total;
            this.TotalRelation = TotalRelation;
            this.Hits = Hits;
        }

        /// <summary>
        /// Maximum score among the matched documents
        /// </summary>
        /// <value>Maximum score among the matched documents</value>
        [DataMember(Name = "max_score", EmitDefaultValue = false)]
        public int MaxScore { get; set; }

        /// <summary>
        /// Total number of matched documents
        /// </summary>
        /// <value>Total number of matched documents</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Indicates whether the total number of hits is accurate or an estimate
        /// </summary>
        /// <value>Indicates whether the total number of hits is accurate or an estimate</value>
        [DataMember(Name = "total_relation", EmitDefaultValue = false)]
        public string TotalRelation { get; set; }

        /// <summary>
        /// Array of hit objects, each representing a matched document
        /// </summary>
        /// <value>Array of hit objects, each representing a matched document</value>
        [DataMember(Name = "hits", EmitDefaultValue = false)]
        public List<HitsHits> Hits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResponseHits {\n");
            sb.Append("  MaxScore: ").Append(MaxScore).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalRelation: ").Append(TotalRelation).Append("\n");
            sb.Append("  Hits: ").Append(Hits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
