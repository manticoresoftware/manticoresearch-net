/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Query match expression
    /// </summary>
    [DataContract(Name = "matchOpFilter")]
    public partial class MatchOpFilter : IEquatable<MatchOpFilter>, IValidatableObject
    {
        /// <summary>
        /// Defines Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum Or for value: or
            /// </summary>
            [EnumMember(Value = "or")]
            Or = 1,

            /// <summary>
            /// Enum And for value: and
            /// </summary>
            [EnumMember(Value = "and")]
            And = 2

        }


        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = false)]
        public OperatorEnum Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchOpFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchOpFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchOpFilter" /> class.
        /// </summary>
        /// <param name="queryString">queryString (required).</param>
        /// <param name="queryFields">queryFields (required).</param>
        /// <param name="_operator">_operator (required).</param>
        public MatchOpFilter(string queryString = default(string), string queryFields = default(string), OperatorEnum _operator = default(OperatorEnum))
        {
            // to ensure "queryString" is required (not null)
            if (queryString == null)
            {
                throw new ArgumentNullException("queryString is a required property for MatchOpFilter and cannot be null");
            }
            this.QueryString = queryString;
            // to ensure "queryFields" is required (not null)
            if (queryFields == null)
            {
                throw new ArgumentNullException("queryFields is a required property for MatchOpFilter and cannot be null");
            }
            this.QueryFields = queryFields;
            this.Operator = _operator;
        }

        /// <summary>
        /// Gets or Sets QueryString
        /// </summary>
        [DataMember(Name = "query_string", IsRequired = true, EmitDefaultValue = false)]
        public string QueryString { get; set; }

        /// <summary>
        /// Gets or Sets QueryFields
        /// </summary>
        [DataMember(Name = "query_fields", IsRequired = true, EmitDefaultValue = false)]
        public string QueryFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchOpFilter {\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("  QueryFields: ").Append(QueryFields).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchOpFilter);
        }

        /// <summary>
        /// Returns true if MatchOpFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchOpFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchOpFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueryString == input.QueryString ||
                    (this.QueryString != null &&
                    this.QueryString.Equals(input.QueryString))
                ) && 
                (
                    this.QueryFields == input.QueryFields ||
                    (this.QueryFields != null &&
                    this.QueryFields.Equals(input.QueryFields))
                ) && 
                (
                    this.Operator == input.Operator ||
                    this.Operator.Equals(input.Operator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryString != null)
                {
                    hashCode = (hashCode * 59) + this.QueryString.GetHashCode();
                }
                if (this.QueryFields != null)
                {
                    hashCode = (hashCode * 59) + this.QueryFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Operator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
