/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = ManticoreSearch.Client.FileParameter;
using OpenAPIDateConverter = ManticoreSearch.Client.OpenAPIDateConverter;

namespace ManticoreSearch.Model
{
    /// <summary>
    /// Query fields to be included/excluded to/from response
    /// </summary>
    [DataContract(Name = "sourceByRules")]
    public partial class SourceByRules : IEquatable<SourceByRules>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceByRules" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SourceByRules() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SourceByRules" /> class.
        /// </summary>
        /// <param name="includes">includes (required).</param>
        /// <param name="excludes">excludes (required).</param>
        public SourceByRules(List<string> includes = default(List<string>), List<string> excludes = default(List<string>))
        {
            // to ensure "includes" is required (not null)
            if (includes == null)
            {
                throw new ArgumentNullException("includes is a required property for SourceByRules and cannot be null");
            }
            this.Includes = includes;
            // to ensure "excludes" is required (not null)
            if (excludes == null)
            {
                throw new ArgumentNullException("excludes is a required property for SourceByRules and cannot be null");
            }
            this.Excludes = excludes;
        }

        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name = "includes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Includes { get; set; }

        /// <summary>
        /// Gets or Sets Excludes
        /// </summary>
        [DataMember(Name = "excludes", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Excludes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SourceByRules {\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Excludes: ").Append(Excludes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SourceByRules);
        }

        /// <summary>
        /// Returns true if SourceByRules instances are equal
        /// </summary>
        /// <param name="input">Instance of SourceByRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SourceByRules input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Includes == input.Includes ||
                    this.Includes != null &&
                    input.Includes != null &&
                    this.Includes.SequenceEqual(input.Includes)
                ) && 
                (
                    this.Excludes == input.Excludes ||
                    this.Excludes != null &&
                    input.Excludes != null &&
                    this.Excludes.SequenceEqual(input.Excludes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Includes != null)
                {
                    hashCode = (hashCode * 59) + this.Includes.GetHashCode();
                }
                if (this.Excludes != null)
                {
                    hashCode = (hashCode * 59) + this.Excludes.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
