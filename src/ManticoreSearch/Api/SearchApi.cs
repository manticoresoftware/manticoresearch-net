/*
 * Manticore Search Client
 *
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using ManticoreSearch.Client;
using ManticoreSearch.Model;

namespace ManticoreSearch.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Performs an autocomplete search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> Autocomplete(AutocompleteRequest autocompleteRequest);

        /// <summary>
        /// Performs an autocomplete search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AutocompleteWithHttpInfo(AutocompleteRequest autocompleteRequest);
        /// <summary>
        /// Perform reverse search on a percolate table
        /// </summary>
        /// <remarks>
        /// Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <returns>SearchResponse</returns>
        SearchResponse Percolate(string table, PercolateRequest percolateRequest);

        /// <summary>
        /// Perform reverse search on a percolate table
        /// </summary>
        /// <remarks>
        /// Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <returns>ApiResponse of SearchResponse</returns>
        ApiResponse<SearchResponse> PercolateWithHttpInfo(string table, PercolateRequest percolateRequest);
        /// <summary>
        /// Performs a search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>SearchResponse</returns>
        SearchResponse Search(SearchRequest searchRequest);

        /// <summary>
        /// Performs a search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>ApiResponse of SearchResponse</returns>
        ApiResponse<SearchResponse> SearchWithHttpInfo(SearchRequest searchRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Performs an autocomplete search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AutocompleteAsync(AutocompleteRequest autocompleteRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Performs an autocomplete search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AutocompleteWithHttpInfoAsync(AutocompleteRequest autocompleteRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Perform reverse search on a percolate table
        /// </summary>
        /// <remarks>
        /// Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        System.Threading.Tasks.Task<SearchResponse> PercolateAsync(string table, PercolateRequest percolateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Perform reverse search on a percolate table
        /// </summary>
        /// <remarks>
        /// Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponse>> PercolateWithHttpInfoAsync(string table, PercolateRequest percolateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Performs a search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        System.Threading.Tasks.Task<SearchResponse> SearchAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Performs a search on a table
        /// </summary>
        /// <remarks>
        ///  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </remarks>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponse>> SearchWithHttpInfoAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : IDisposable, ISearchApi
    {
        private ManticoreSearch.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SearchApi(string basePath)
        {
            this.Configuration = ManticoreSearch.Client.Configuration.MergeConfigurations(
                ManticoreSearch.Client.GlobalConfiguration.Instance,
                new ManticoreSearch.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ManticoreSearch.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ManticoreSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SearchApi(ManticoreSearch.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ManticoreSearch.Client.Configuration.MergeConfigurations(
                ManticoreSearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ManticoreSearch.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ManticoreSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SearchApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SearchApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ManticoreSearch.Client.Configuration.MergeConfigurations(
                ManticoreSearch.Client.GlobalConfiguration.Instance,
                new ManticoreSearch.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new ManticoreSearch.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = ManticoreSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SearchApi(HttpClient client, ManticoreSearch.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = ManticoreSearch.Client.Configuration.MergeConfigurations(
                ManticoreSearch.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new ManticoreSearch.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = ManticoreSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SearchApi(ManticoreSearch.Client.ISynchronousClient client, ManticoreSearch.Client.IAsynchronousClient asyncClient, ManticoreSearch.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ManticoreSearch.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ManticoreSearch.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ManticoreSearch.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ManticoreSearch.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ManticoreSearch.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ManticoreSearch.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Performs an autocomplete search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> Autocomplete(AutocompleteRequest autocompleteRequest)
        {
            ManticoreSearch.Client.ApiResponse<List<Object>> localVarResponse = AutocompleteWithHttpInfo(autocompleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Performs an autocomplete search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ManticoreSearch.Client.ApiResponse<List<Object>> AutocompleteWithHttpInfo(AutocompleteRequest autocompleteRequest)
        {
            // verify the required parameter 'autocompleteRequest' is set
            if (autocompleteRequest == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'autocompleteRequest' when calling SearchApi->Autocomplete");

            ManticoreSearch.Client.RequestOptions localVarRequestOptions = new ManticoreSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ManticoreSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ManticoreSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = autocompleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Object>>("/autocomplete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Autocomplete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Performs an autocomplete search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AutocompleteAsync(AutocompleteRequest autocompleteRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ManticoreSearch.Client.ApiResponse<List<Object>> localVarResponse = await AutocompleteWithHttpInfoAsync(autocompleteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Performs an autocomplete search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the query string to autocomplete For details, see the documentation on [**Autocomplete**](Autocomplete.md) An example: &#x60;&#x60;&#x60; {   \&quot;table\&quot;:\&quot;table_name\&quot;,   \&quot;query\&quot;:\&quot;query_beginning\&quot; }         &#x60;&#x60;&#x60; An example of the method&#39;s response:   &#x60;&#x60;&#x60;  [    {      \&quot;total\&quot;: 3,      \&quot;error\&quot;: \&quot;\&quot;,      \&quot;warning\&quot;: \&quot;\&quot;,      \&quot;columns\&quot;: [        {          \&quot;query\&quot;: {            \&quot;type\&quot;: \&quot;string\&quot;          }        }      ],      \&quot;data\&quot;: [        {          \&quot;query\&quot;: \&quot;hello\&quot;        },        {          \&quot;query\&quot;: \&quot;helio\&quot;        },        {          \&quot;query\&quot;: \&quot;hell\&quot;        }      ]    }  ]   &#x60;&#x60;&#x60;  For more detailed information about the autocomplete queries, please refer to the documentation [here](https://manual.manticoresearch.com/Searching/Autocomplete). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autocompleteRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ManticoreSearch.Client.ApiResponse<List<Object>>> AutocompleteWithHttpInfoAsync(AutocompleteRequest autocompleteRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'autocompleteRequest' is set
            if (autocompleteRequest == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'autocompleteRequest' when calling SearchApi->Autocomplete");


            ManticoreSearch.Client.RequestOptions localVarRequestOptions = new ManticoreSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ManticoreSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ManticoreSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = autocompleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Object>>("/autocomplete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Autocomplete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform reverse search on a percolate table Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <returns>SearchResponse</returns>
        public SearchResponse Percolate(string table, PercolateRequest percolateRequest)
        {
            ManticoreSearch.Client.ApiResponse<SearchResponse> localVarResponse = PercolateWithHttpInfo(table, percolateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform reverse search on a percolate table Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <returns>ApiResponse of SearchResponse</returns>
        public ManticoreSearch.Client.ApiResponse<SearchResponse> PercolateWithHttpInfo(string table, PercolateRequest percolateRequest)
        {
            // verify the required parameter 'table' is set
            if (table == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'table' when calling SearchApi->Percolate");

            // verify the required parameter 'percolateRequest' is set
            if (percolateRequest == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'percolateRequest' when calling SearchApi->Percolate");

            ManticoreSearch.Client.RequestOptions localVarRequestOptions = new ManticoreSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ManticoreSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ManticoreSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("table", ManticoreSearch.Client.ClientUtils.ParameterToString(table)); // path parameter
            localVarRequestOptions.Data = percolateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResponse>("/pq/{table}/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Percolate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform reverse search on a percolate table Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        public async System.Threading.Tasks.Task<SearchResponse> PercolateAsync(string table, PercolateRequest percolateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ManticoreSearch.Client.ApiResponse<SearchResponse> localVarResponse = await PercolateWithHttpInfoAsync(table, percolateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform reverse search on a percolate table Performs a percolate search. This method must be used only on percolate tables. Expects two parameters: the table name and an object with array of documents to be tested. An example of the documents object: &#x60;&#x60;&#x60;   {     \&quot;query\&quot; {       \&quot;percolate\&quot;: {         \&quot;document\&quot;: {           \&quot;content\&quot;:\&quot;sample content\&quot;         }       }     }   } &#x60;&#x60;&#x60; Responds with an object with matched stored queries:  &#x60;&#x60;&#x60;   {     &#39;timed_out&#39;:false,     &#39;hits&#39;: {       &#39;total&#39;:2,       &#39;max_score&#39;:1,       &#39;hits&#39;: [         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;2&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;match&#39;:{&#39;title&#39;:&#39;some&#39;}             }           }         },         {           &#39;table&#39;:&#39;idx_pq_1&#39;,           &#39;_type&#39;:&#39;doc&#39;,           &#39;_id&#39;:&#39;5&#39;,           &#39;_score&#39;:&#39;1&#39;,           &#39;_source&#39;: {             &#39;query&#39;: {               &#39;ql&#39;:&#39;some | none&#39;             }           }         }       ]     }   } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="table">Name of the percolate table</param>
        /// <param name="percolateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        public async System.Threading.Tasks.Task<ManticoreSearch.Client.ApiResponse<SearchResponse>> PercolateWithHttpInfoAsync(string table, PercolateRequest percolateRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'table' is set
            if (table == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'table' when calling SearchApi->Percolate");

            // verify the required parameter 'percolateRequest' is set
            if (percolateRequest == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'percolateRequest' when calling SearchApi->Percolate");


            ManticoreSearch.Client.RequestOptions localVarRequestOptions = new ManticoreSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ManticoreSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ManticoreSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("table", ManticoreSearch.Client.ClientUtils.ParameterToString(table)); // path parameter
            localVarRequestOptions.Data = percolateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponse>("/pq/{table}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Percolate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Performs a search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>SearchResponse</returns>
        public SearchResponse Search(SearchRequest searchRequest)
        {
            ManticoreSearch.Client.ApiResponse<SearchResponse> localVarResponse = SearchWithHttpInfo(searchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <returns>ApiResponse of SearchResponse</returns>
        public ManticoreSearch.Client.ApiResponse<SearchResponse> SearchWithHttpInfo(SearchRequest searchRequest)
        {
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'searchRequest' when calling SearchApi->Search");

            ManticoreSearch.Client.RequestOptions localVarRequestOptions = new ManticoreSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ManticoreSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ManticoreSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = searchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResponse>("/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Performs a search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponse</returns>
        public async System.Threading.Tasks.Task<SearchResponse> SearchAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            ManticoreSearch.Client.ApiResponse<SearchResponse> localVarResponse = await SearchWithHttpInfoAsync(searchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a search on a table  The method expects an object with the following mandatory properties: * the name of the table to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Also, if pagination is enabled, the response will include an additional &#39;scroll&#39; property with a scroll token to use for pagination Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
        /// </summary>
        /// <exception cref="ManticoreSearch.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponse)</returns>
        public async System.Threading.Tasks.Task<ManticoreSearch.Client.ApiResponse<SearchResponse>> SearchWithHttpInfoAsync(SearchRequest searchRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchRequest' is set
            if (searchRequest == null)
                throw new ManticoreSearch.Client.ApiException(400, "Missing required parameter 'searchRequest' when calling SearchApi->Search");


            ManticoreSearch.Client.RequestOptions localVarRequestOptions = new ManticoreSearch.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = ManticoreSearch.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ManticoreSearch.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = searchRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponse>("/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
